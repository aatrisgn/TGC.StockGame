import { Component } from '@angular/core';
import { FormArray, FormControl, FormGroup } from '@angular/forms';
import { GameClient, GameRequest, PlayerRequest } from 'src/app/generated/autogenerated-client';
import { CurrentGameState } from 'src/app/services/CurrentGameState.service';
import { SharedModule } from 'src/app/theme/shared/shared.module';

@Component({
  selector: 'app-add-game',
  imports: [SharedModule],
  templateUrl: './add-game.component.html',
  styleUrl: './add-game.component.scss',
  providers: [GameClient],
  standalone: true
})
export class AddGameComponent {
  gameForm = new FormGroup({
    name: new FormControl(''), // Field for name
    players: new FormArray([this.createPlayerFormGroup()]) // Initialize with one player
  });

  constructor(private gameClient:GameClient, private currentGameState:CurrentGameState){

  }

  get players(): FormArray {
    return this.gameForm.get('players') as FormArray;
  }

  createPlayerFormGroup(): FormGroup {
    return new FormGroup({
      name: new FormControl('')
    });
  }

  addPlayer(): void {
    this.players.push(this.createPlayerFormGroup());
  }

  removePlayer(index: number): void {
    this.players.removeAt(index);
  }

  onSubmit(): void {

    var gameRequest = new GameRequest();
    gameRequest.name = this.gameForm.value.name?.valueOf()
    gameRequest.players = this.gameForm.value.players?.map(p => {
      var newPlayer = new PlayerRequest()
      newPlayer.name = p.name;

      return newPlayer;
    })

    this.gameClient.createNewGame(gameRequest).subscribe(response => {
      this.currentGameState.emitNewGameEvent(response);
      this.gameForm.reset();
    });

  }
}
